/* automatically generated by rust-bindgen */

#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed1 {
    M68K_CPU_TYPE_INVALID = 0,
    M68K_CPU_TYPE_68000 = 1,
    M68K_CPU_TYPE_68010 = 2,
    M68K_CPU_TYPE_68EC020 = 3,
    M68K_CPU_TYPE_68020 = 4,
    M68K_CPU_TYPE_68030 = 5,
    M68K_CPU_TYPE_68040 = 6,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed2 {
    M68K_REG_D0 = 0,
    M68K_REG_D1 = 1,
    M68K_REG_D2 = 2,
    M68K_REG_D3 = 3,
    M68K_REG_D4 = 4,
    M68K_REG_D5 = 5,
    M68K_REG_D6 = 6,
    M68K_REG_D7 = 7,
    M68K_REG_A0 = 8,
    M68K_REG_A1 = 9,
    M68K_REG_A2 = 10,
    M68K_REG_A3 = 11,
    M68K_REG_A4 = 12,
    M68K_REG_A5 = 13,
    M68K_REG_A6 = 14,
    M68K_REG_A7 = 15,
    M68K_REG_PC = 16,
    M68K_REG_SR = 17,
    M68K_REG_SP = 18,
    M68K_REG_USP = 19,
    M68K_REG_ISP = 20,
    M68K_REG_MSP = 21,
    M68K_REG_SFC = 22,
    M68K_REG_DFC = 23,
    M68K_REG_VBR = 24,
    M68K_REG_CACR = 25,
    M68K_REG_CAAR = 26,
    M68K_REG_PREF_ADDR = 27,
    M68K_REG_PREF_DATA = 28,
    M68K_REG_PPC = 29,
    M68K_REG_IR = 30,
    M68K_REG_CPU_TYPE = 31,
}
pub type m68k_register_t = Enum_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub cpu_type: ::std::os::raw::c_uint,
    pub dar: [::std::os::raw::c_uint; 16usize],
    pub ppc: ::std::os::raw::c_uint,
    pub pc: ::std::os::raw::c_uint,
    pub sp: [::std::os::raw::c_uint; 7usize],
    pub vbr: ::std::os::raw::c_uint,
    pub sfc: ::std::os::raw::c_uint,
    pub dfc: ::std::os::raw::c_uint,
    pub cacr: ::std::os::raw::c_uint,
    pub caar: ::std::os::raw::c_uint,
    pub ir: ::std::os::raw::c_uint,
    pub t1_flag: ::std::os::raw::c_uint,
    pub t0_flag: ::std::os::raw::c_uint,
    pub s_flag: ::std::os::raw::c_uint,
    pub m_flag: ::std::os::raw::c_uint,
    pub x_flag: ::std::os::raw::c_uint,
    pub n_flag: ::std::os::raw::c_uint,
    pub not_z_flag: ::std::os::raw::c_uint,
    pub v_flag: ::std::os::raw::c_uint,
    pub c_flag: ::std::os::raw::c_uint,
    pub int_mask: ::std::os::raw::c_uint,
    pub int_level: ::std::os::raw::c_uint,
    pub int_cycles: ::std::os::raw::c_uint,
    pub stopped: ::std::os::raw::c_uint,
    pub pref_addr: ::std::os::raw::c_uint,
    pub pref_data: ::std::os::raw::c_uint,
    pub address_mask: ::std::os::raw::c_uint,
    pub sr_mask: ::std::os::raw::c_uint,
    pub instr_mode: ::std::os::raw::c_uint,
    pub run_mode: ::std::os::raw::c_uint,
    pub cyc_bcc_notake_b: ::std::os::raw::c_uint,
    pub cyc_bcc_notake_w: ::std::os::raw::c_uint,
    pub cyc_dbcc_f_noexp: ::std::os::raw::c_uint,
    pub cyc_dbcc_f_exp: ::std::os::raw::c_uint,
    pub cyc_scc_r_false: ::std::os::raw::c_uint,
    pub cyc_movem_w: ::std::os::raw::c_uint,
    pub cyc_movem_l: ::std::os::raw::c_uint,
    pub cyc_shift: ::std::os::raw::c_uint,
    pub cyc_reset: ::std::os::raw::c_uint,
    pub cyc_instruction: *mut ::std::os::raw::c_uchar,
    pub cyc_exception: *mut ::std::os::raw::c_uchar,
    pub int_ack_callback: ::std::option::Option<extern "C" fn(int_line: ::std::os::raw::c_int)
                                                              -> ::std::os::raw::c_int>,
    pub bkpt_ack_callback: ::std::option::Option<extern "C" fn(data: ::std::os::raw::c_uint)>,
    pub reset_instr_callback: ::std::option::Option<extern "C" fn()>,
    pub pc_changed_callback: ::std::option::Option<extern "C" fn(new_pc: ::std::os::raw::c_uint)>,
    pub set_fc_callback: ::std::option::Option<extern "C" fn(new_fc: ::std::os::raw::c_uint)>,
    pub instr_hook_callback: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type m68ki_cpu_core = Struct_Unnamed3;
extern "C" {
    pub static mut m68ki_cpu: m68ki_cpu_core;
    pub static mut m68ki_remaining_cycles: ::std::os::raw::c_int;
    pub static mut m68ki_tracing: ::std::os::raw::c_uint;
    pub static mut m68ki_shift_8_table: *mut ::std::os::raw::c_uchar;
    pub static mut m68ki_shift_16_table: *mut ::std::os::raw::c_ushort;
    pub static mut m68ki_shift_32_table: *mut ::std::os::raw::c_uint;
    pub static mut m68ki_exception_cycle_table: *mut [::std::os::raw::c_uchar; 256usize];
    pub static mut m68ki_address_space: ::std::os::raw::c_uint;
    pub static mut m68ki_ea_idx_cycle_table: *mut ::std::os::raw::c_uchar;
    pub static mut m68ki_aerr_address: ::std::os::raw::c_uint;
    pub static mut m68ki_aerr_write_mode: ::std::os::raw::c_uint;
    pub static mut m68ki_aerr_fc: ::std::os::raw::c_uint;
}
extern "C" {
    pub fn m68k_read_memory_8(address: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
    pub fn m68k_read_memory_16(address: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
    pub fn m68k_read_memory_32(address: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
    pub fn m68k_read_immediate_16(address: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
    pub fn m68k_read_immediate_32(address: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
    pub fn m68k_read_pcrelative_8(address: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
    pub fn m68k_read_pcrelative_16(address: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
    pub fn m68k_read_pcrelative_32(address: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
    pub fn m68k_read_disassembler_8(address: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
    pub fn m68k_read_disassembler_16(address: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
    pub fn m68k_read_disassembler_32(address: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
    pub fn m68k_write_memory_8(address: ::std::os::raw::c_uint, value: ::std::os::raw::c_uint);
    pub fn m68k_write_memory_16(address: ::std::os::raw::c_uint, value: ::std::os::raw::c_uint);
    pub fn m68k_write_memory_32(address: ::std::os::raw::c_uint, value: ::std::os::raw::c_uint);
    pub fn m68k_write_memory_32_pd(address: ::std::os::raw::c_uint,
                                   value: ::std::os::raw::c_uint);
    pub fn m68k_set_int_ack_callback(callback:
                                         ::std::option::Option<extern "C" fn(int_level:
                                                                                 ::std::os::raw::c_int)
                                                                   ->
::std::os::raw::c_int>);
    pub fn m68k_set_bkpt_ack_callback(callback:
                                          ::std::option::Option<extern "C" fn(data:
::std::os::raw::c_uint)>);
    pub fn m68k_set_reset_instr_callback(callback: ::std::option::Option<extern "C" fn()>);
    pub fn m68k_set_pc_changed_callback(callback:
                                            ::std::option::Option<extern "C" fn(new_pc:
::std::os::raw::c_uint)>);
    pub fn m68k_set_fc_callback(callback:
                                    ::std::option::Option<extern "C" fn(new_fc:
::std::os::raw::c_uint)>);
    pub fn m68k_set_instr_hook_callback(callback: ::std::option::Option<extern "C" fn()>);
    pub fn m68k_set_cpu_type(cpu_type: ::std::os::raw::c_uint);
    pub fn m68k_init();
    pub fn m68k_pulse_reset();
    pub fn m68k_execute(num_cycles: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn m68k_cycles_run() -> ::std::os::raw::c_int;
    pub fn m68k_cycles_remaining() -> ::std::os::raw::c_int;
    pub fn m68k_modify_timeslice(cycles: ::std::os::raw::c_int);
    pub fn m68k_end_timeslice();
    pub fn m68k_set_irq(int_level: ::std::os::raw::c_uint);
    pub fn m68k_pulse_halt();
    pub fn m68k_context_size() -> ::std::os::raw::c_uint;
    pub fn m68k_get_context(dst: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_uint;
    pub fn m68k_set_context(dst: *mut ::std::os::raw::c_void);
    pub fn m68k_state_register(_type: *const ::std::os::raw::c_char);
    pub fn m68k_get_reg(context: *mut ::std::os::raw::c_void,
                        reg: m68k_register_t)
                        -> ::std::os::raw::c_uint;
    pub fn m68k_set_reg(reg: m68k_register_t, value: ::std::os::raw::c_uint);
    pub fn m68k_is_valid_instruction(instruction: ::std::os::raw::c_uint,
                                     cpu_type: ::std::os::raw::c_uint)
                                     -> ::std::os::raw::c_uint;
    pub fn m68k_disassemble(str_buff: *mut ::std::os::raw::c_char,
                            pc: ::std::os::raw::c_uint,
                            cpu_type: ::std::os::raw::c_uint)
                            -> ::std::os::raw::c_uint;
    pub fn m68ki_disassemble_quick(pc: ::std::os::raw::c_uint,
                                   cpu_type: ::std::os::raw::c_uint)
                                   -> *mut ::std::os::raw::c_char;
}
