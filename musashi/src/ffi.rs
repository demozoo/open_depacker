/* automatically generated by rust-bindgen (with some manual cleanup) */


use std::os::raw::{c_char, c_int, c_uint, c_void};

#[derive(Clone, Copy)]
#[repr(u32)]
#[allow(non_camel_case_types)] 
#[allow(dead_code)] 
pub enum EnumUnnamed1 {
    M68K_CPU_TYPE_INVALID = 0,
    M68K_CPU_TYPE_68000 = 1,
    M68K_CPU_TYPE_68010 = 2,
    M68K_CPU_TYPE_68EC020 = 3,
    M68K_CPU_TYPE_68020 = 4,
    M68K_CPU_TYPE_68030 = 5,
    M68K_CPU_TYPE_68040 = 6,
}
#[derive(Clone, Copy)]
#[repr(u32)]
#[allow(non_camel_case_types)] 
#[allow(dead_code)] 
pub enum EnumUnnamed2 {
    M68K_REG_D0 = 0,
    M68K_REG_D1 = 1,
    M68K_REG_D2 = 2,
    M68K_REG_D3 = 3,
    M68K_REG_D4 = 4,
    M68K_REG_D5 = 5,
    M68K_REG_D6 = 6,
    M68K_REG_D7 = 7,
    M68K_REG_A0 = 8,
    M68K_REG_A1 = 9,
    M68K_REG_A2 = 10,
    M68K_REG_A3 = 11,
    M68K_REG_A4 = 12,
    M68K_REG_A5 = 13,
    M68K_REG_A6 = 14,
    M68K_REG_A7 = 15,
    M68K_REG_PC = 16,
    M68K_REG_SR = 17,
    M68K_REG_SP = 18,
    M68K_REG_USP = 19,
    M68K_REG_ISP = 20,
    M68K_REG_MSP = 21,
    M68K_REG_SFC = 22,
    M68K_REG_DFC = 23,
    M68K_REG_VBR = 24,
    M68K_REG_CACR = 25,
    M68K_REG_CAAR = 26,
    M68K_REG_PREF_ADDR = 27,
    M68K_REG_PREF_DATA = 28,
    M68K_REG_PPC = 29,
    M68K_REG_IR = 30,
    M68K_REG_CPU_TYPE = 31,
}
#[allow(non_camel_case_types)] 
pub type m68k_register_t = EnumUnnamed2;
#[allow(dead_code)] 
extern {
    /*
    pub fn m68k_read_memory_8(address: c_uint) -> c_uint;
    pub fn m68k_read_memory_16(address: c_uint) -> c_uint;
    pub fn m68k_read_memory_32(address: c_uint) -> c_uint;
    pub fn m68k_read_immediate_16(address: c_uint) -> c_uint;
    pub fn m68k_read_immediate_32(address: c_uint) -> c_uint;
    pub fn m68k_read_pcrelative_8(address: c_uint) -> c_uint;
    pub fn m68k_read_pcrelative_16(address: c_uint) -> c_uint;
    pub fn m68k_read_pcrelative_32(address: c_uint) -> c_uint;
    pub fn m68k_read_disassembler_8(address: c_uint) -> c_uint;
    pub fn m68k_read_disassembler_16(address: c_uint) -> c_uint;
    pub fn m68k_read_disassembler_32(address: c_uint) -> c_uint;
    pub fn m68k_write_memory_8(address: c_uint, value: c_uint);
    pub fn m68k_write_memory_16(address: c_uint, value: c_uint);
    pub fn m68k_write_memory_32(address: c_uint, value: c_uint);
    pub fn m68k_write_memory_32_pd(address: c_uint, value: c_uint);
    */
    pub fn m68k_set_int_ack_callback(callback: Option<extern "C" fn(int_level: c_int) -> c_int>);
    pub fn m68k_set_bkpt_ack_callback(callback: Option<extern "C" fn(data: c_uint)>);
    pub fn m68k_set_reset_instr_callback(callback: Option<extern "C" fn()>);
    pub fn m68k_set_pc_changed_callback(callback: Option<extern "C" fn(new_pc: c_uint)>);
    pub fn m68k_set_fc_callback(callback: Option<extern "C" fn(new_fc: c_uint)>);
    pub fn m68k_set_instr_hook_callback(callback: Option<extern "C" fn()>);
    pub fn m68k_set_cpu_type(cpu_type: c_uint);
    pub fn m68k_init();
    pub fn m68k_pulse_reset();
    pub fn m68k_execute(num_cycles: c_int) -> c_int;
    pub fn m68k_cycles_run() -> c_int;
    pub fn m68k_cycles_remaining() -> c_int;
    pub fn m68k_modify_timeslice(cycles: c_int);
    pub fn m68k_end_timeslice();
    pub fn m68k_set_irq(int_level: c_uint);
    pub fn m68k_pulse_halt();
    pub fn m68k_context_size() -> c_uint;
    pub fn m68k_get_context(dst: *mut c_void) -> c_uint;
    pub fn m68k_set_context(dst: *mut c_void);
    pub fn m68k_state_register(_type: *const c_char);
    pub fn m68k_get_reg(context: *mut c_void, reg: m68k_register_t) -> c_uint;
    pub fn m68k_set_reg(reg: m68k_register_t, value: c_uint);
    pub fn m68k_is_valid_instruction(instruction: c_uint, cpu_type: c_uint) -> c_uint;
    pub fn m68k_disassemble(str_buff: *mut c_char, pc: c_uint, cpu_type: c_uint) -> c_uint;
}
